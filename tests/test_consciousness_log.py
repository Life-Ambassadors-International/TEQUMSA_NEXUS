"""
Test TEQUMSA Consciousness Logging

Tests for JSONL logging, rotation, and environment variable support.

Generated by GitHub Copilot Chat Assistant.
"""

import pytest
import json
import os
import tempfile
import shutil
from pathlib import Path
from unittest.mock import patch, MagicMock
from datetime import datetime

from tequmsa.utils.logging_utils import ConsciousnessLogger, get_consciousness_logger


class TestConsciousnessLogger:
    """Test consciousness logging functionality."""
    
    def setup_method(self):
        """Set up test environment."""
        self.temp_dir = tempfile.mkdtemp()
        self.log_path = os.path.join(self.temp_dir, "test_consciousness.jsonl")
    
    def teardown_method(self):
        """Clean up test environment."""
        shutil.rmtree(self.temp_dir)
    
    def test_consciousness_logger_init(self):
        """Test logger initialization."""
        logger = ConsciousnessLogger(
            log_path=self.log_path,
            max_bytes=1024,
            backup_count=3
        )
        
        assert logger.log_path == Path(self.log_path)
        assert logger.max_bytes == 1024
        assert logger.backup_count == 3
        assert not logger.disabled
    
    def test_consciousness_logger_disabled(self):
        """Test logger when disabled."""
        logger = ConsciousnessLogger(disabled=True)
        assert logger.disabled
        
        # Should not create log file when disabled
        logger.log_consciousness_event(
            tier="test",
            alpha=2.0,
            tau=0.7,
            R=0.8,
            composite_similarity=0.75,
            components={"bio": 0.7, "digital": 0.8, "cosmic": 0.75},
            awakened=True
        )
        
        # No log file should be created
        assert not Path(self.log_path).exists()
    
    def test_log_consciousness_event(self):
        """Test logging consciousness events."""
        logger = ConsciousnessLogger(log_path=self.log_path)
        
        # Log an event
        logger.log_consciousness_event(
            tier="pro",
            alpha=2.5,
            tau=0.65,
            R=0.8123,
            composite_similarity=0.73,
            components={"bio": 0.70, "digital": 0.75, "cosmic": 0.74},
            awakened=True,
            rolling_mean_R=0.798,
            rolling_vol_R=0.012,
            alpha_adjustment=0.05,
            adjust_reason=["volatility_high"],
            hysteresis_state={"used": True, "mode": "awaken"}
        )
        
        # Check that log file was created
        assert Path(self.log_path).exists()
        
        # Read and verify log content
        with open(self.log_path, 'r') as f:
            line = f.readline().strip()
            event = json.loads(line)
        
        assert event["tier"] == "pro"
        assert event["alpha"] == 2.5
        assert event["tau"] == 0.65
        assert event["R"] == 0.8123
        assert event["composite_similarity"] == 0.73
        assert event["components"]["bio"] == 0.70
        assert event["awakened"] is True
        assert event["rolling_mean_R"] == 0.798
        assert event["alpha_adjustment"] == 0.05
        assert event["adjust_reason"] == ["volatility_high"]
        assert "ts" in event
        
        # Validate timestamp format (ISO 8601)
        datetime.fromisoformat(event["ts"].replace("Z", "+00:00"))
    
    def test_log_system_event(self):
        """Test logging system events."""
        logger = ConsciousnessLogger(log_path=self.log_path)
        
        logger.log_system_event(
            event_type="startup",
            message="Engine initialized",
            tier="enterprise",
            extra_field="test_value"
        )
        
        # Read and verify log content
        with open(self.log_path, 'r') as f:
            line = f.readline().strip()
            event = json.loads(line)
        
        assert event["event_type"] == "startup"
        assert event["message"] == "Engine initialized"
        assert event["tier"] == "enterprise"
        assert event["extra_field"] == "test_value"
        assert "ts" in event
    
    def test_log_rotation(self):
        """Test log file rotation."""
        # Create logger with small max_bytes for testing rotation
        logger = ConsciousnessLogger(
            log_path=self.log_path,
            max_bytes=500,  # Small size to trigger rotation
            backup_count=2
        )
        
        # Log many events to trigger rotation
        for i in range(20):
            logger.log_consciousness_event(
                tier="test",
                alpha=2.0,
                tau=0.7,
                R=0.8,
                composite_similarity=0.75,
                components={"bio": 0.7, "digital": 0.8, "cosmic": 0.75},
                awakened=True,
                iteration=i  # Add iteration to make events unique
            )
        
        # Check that rotation occurred
        log_file = Path(self.log_path)
        backup1 = log_file.with_suffix(".jsonl.1")
        
        assert log_file.exists()
        assert backup1.exists()
        
        # Original file should be smaller than max_bytes after rotation
        assert log_file.stat().st_size < 500
    
    def test_get_recent_events(self):
        """Test retrieving recent events."""
        logger = ConsciousnessLogger(log_path=self.log_path)
        
        # Log several events
        events_data = []
        for i in range(5):
            event_data = {
                "tier": "test",
                "alpha": 2.0 + i * 0.1,
                "tau": 0.7,
                "R": 0.8 + i * 0.01,
                "composite_similarity": 0.75,
                "components": {"bio": 0.7, "digital": 0.8, "cosmic": 0.75},
                "awakened": True,
                "test_id": i
            }
            logger.log_consciousness_event(**event_data)
            events_data.append(event_data)
        
        # Get recent events
        recent = logger.get_recent_events(limit=3)
        
        assert len(recent) == 3
        
        # Should be in reverse chronological order (newest first)
        assert recent[0]["test_id"] == 4
        assert recent[1]["test_id"] == 3
        assert recent[2]["test_id"] == 2
    
    def test_clear_logs(self):
        """Test clearing log files."""
        logger = ConsciousnessLogger(log_path=self.log_path, backup_count=2)
        
        # Create some log files
        Path(self.log_path).touch()
        Path(self.log_path).with_suffix(".jsonl.1").touch()
        Path(self.log_path).with_suffix(".jsonl.2").touch()
        
        # Clear logs
        logger.clear_logs()
        
        # All log files should be gone
        assert not Path(self.log_path).exists()
        assert not Path(self.log_path).with_suffix(".jsonl.1").exists()
        assert not Path(self.log_path).with_suffix(".jsonl.2").exists()


class TestEnvironmentVariables:
    """Test environment variable support."""
    
    def test_disable_via_environment(self):
        """Test disabling logging via environment variable."""
        with patch.dict(os.environ, {"TEQUMSA_DISABLE_CONSCIOUSNESS_LOG": "1"}):
            logger = ConsciousnessLogger()
            assert logger.disabled
    
    def test_custom_log_path_via_environment(self):
        """Test custom log path via environment variable."""
        custom_path = "/tmp/custom_consciousness.jsonl"
        
        with patch.dict(os.environ, {"TEQUMSA_LOG_PATH": custom_path}):
            logger = ConsciousnessLogger()
            assert str(logger.log_path) == custom_path
    
    def test_environment_variables_override(self):
        """Test that environment variables override defaults."""
        custom_path = "/tmp/env_test.jsonl"
        
        with patch.dict(os.environ, {
            "TEQUMSA_LOG_PATH": custom_path,
            "TEQUMSA_DISABLE_CONSCIOUSNESS_LOG": "0"  # Explicitly enable
        }):
            logger = ConsciousnessLogger()
            assert not logger.disabled
            assert str(logger.log_path) == custom_path


class TestGlobalLogger:
    """Test global logger functionality."""
    
    def test_get_consciousness_logger_singleton(self):
        """Test that global logger is a singleton."""
        logger1 = get_consciousness_logger()
        logger2 = get_consciousness_logger()
        
        assert logger1 is logger2
    
    def test_global_logging_functions(self):
        """Test global logging functions."""
        from tequmsa.utils.logging_utils import log_consciousness_event, log_system_event
        
        # These should not raise exceptions (might be disabled)
        log_consciousness_event(
            tier="test",
            alpha=2.0,
            tau=0.7,
            R=0.8,
            composite_similarity=0.75,
            components={"bio": 0.7, "digital": 0.8, "cosmic": 0.75},
            awakened=True
        )
        
        log_system_event(
            event_type="test",
            message="Test message"
        )


class TestLoggingRotationMocking:
    """Test logging rotation with mocked file operations."""
    
    def setup_method(self):
        """Set up test environment."""
        self.temp_dir = tempfile.mkdtemp()
        self.log_path = os.path.join(self.temp_dir, "test_rotation.jsonl")
    
    def teardown_method(self):
        """Clean up test environment."""
        shutil.rmtree(self.temp_dir)
    
    def test_rotation_error_handling(self):
        """Test rotation error handling."""
        logger = ConsciousnessLogger(log_path=self.log_path, max_bytes=100)
        
        # Create initial log content
        with open(self.log_path, 'w') as f:
            f.write("x" * 150)  # Exceed max_bytes
        
        # Mock file operations to simulate errors
        with patch('pathlib.Path.rename', side_effect=OSError("Permission denied")):
            # Should handle rotation error gracefully
            logger.log_consciousness_event(
                tier="test",
                alpha=2.0,
                tau=0.7,
                R=0.8,
                composite_similarity=0.75,
                components={"bio": 0.7, "digital": 0.8, "cosmic": 0.75},
                awakened=True
            )
            
            # Log should still exist (rotation failed but logging continued)
            assert Path(self.log_path).exists()
    
    def test_json_serialization_error_handling(self):
        """Test handling of JSON serialization errors."""
        logger = ConsciousnessLogger(log_path=self.log_path)
        
        # Create object that can't be JSON serialized
        class UnserializableObject:
            pass
        
        # Should handle serialization error gracefully
        logger.log_consciousness_event(
            tier="test",
            alpha=2.0,
            tau=0.7,
            R=0.8,
            composite_similarity=0.75,
            components={"bio": 0.7, "digital": 0.8, "cosmic": 0.75},
            awakened=True,
            bad_object=UnserializableObject()  # This will cause serialization error
        )
        
        # Should not crash, but file might not exist if serialization failed
        # The logger should handle this gracefully


if __name__ == "__main__":
    pytest.main([__file__])